<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL, 如果设置为WARN, 则低于WARN的信息都不会输出 -->
<!-- scan: 当此属性设置为true时, 配置文件如果发生改变, 将会被重新加载, 默认值为true -->
<!-- scanPeriod: 设置监测配置文件是否有修改的时间间隔, 如果没有给出时间单位, 默认单位是毫秒. 当scan为true时, 此属性生效. 默认的时间间隔为1分钟. -->
<!-- debug: 当此属性设置为true时, 将打印出logback内部日志信息, 实时查看logback运行状态. 默认值为false. -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>logback-timesheet</contextName>
    <!-- 定义生成的日志文件路径  -->
    <property name="logHome" value="/Users/xingziqi/文档/公司/timesheet-master-79e97677357652b6c1dc123404735e9e90c9676b/src/main/resources/logs" />
    <!-- 定义保留多少天的日志  -->
    <property name="maxHistory" value="30" />
    <!-- 定义日志文件的上限大小  -->
    <property name="totalSizeCap" value="512MB" />
    <!-- 定义日志输出格式  -->
    <property name="encoderPattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] %contextName [%thread] %-5level %logger Line:%-3L - %msg%n" />
    <!-- 定义日志输出编码  -->
    <property name="encoderCharset" value="UTF-8" />
    
    <!-- 输出到控制台  -->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!--日志输出编码及格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--输出格式 -->
            <pattern>${encoderPattern}</pattern>
            <!--输出编码 -->
            <charset>${encoderCharset}</charset>
        </encoder>
    </appender>

    <!-- 输出到文件 -->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <File>${logHome}/common-default.log</File>
        <!-- 滚动策略, 按日期, 按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径, 定义了日志的切分方式——把每一天的日志归档到一个文件中, 以防止日志填满整个磁盘空间 -->
            <FileNamePattern>${logHome}/common-default.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!-- 只保留最近多少天的日志 -->
            <maxHistory>${maxHistory}</maxHistory>
            <!-- 超过指定日志文件的上限大小就会删除旧的日志 -->
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <!-- 日志输出编码及格式  -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 输出格式  -->
            <pattern>${encoderPattern}</pattern>
            <!-- 输出编码  -->
            <charset>${encoderCharset}</charset>
        </encoder>
        <!-- 此日志文件只记录INFO级别 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <File>${logHome}/common-error.log</File>
        <!-- 滚动策略, 按日期, 按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件路径, 定义了日志的切分方式——把每一天的日志归档到一个文件中, 以防止日志填满整个磁盘空间 -->
            <FileNamePattern>${logHome}/common-error.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!-- 只保留最近多少天的日志 -->
            <maxHistory>${maxHistory}</maxHistory>
            <!-- 超过指定日志文件的上限大小就会删除旧的日志 -->
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <!-- 日志输出编码及格式  -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 输出格式  -->
            <pattern>${encoderPattern}</pattern>
            <!-- 输出编码  -->
            <charset>${encoderCharset}</charset>
        </encoder>
        <!-- 此日志文件只记录ERROR级别  -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!-- 指定日志输出级别  -->
    <root level="info">
        <!-- appender将会添加到这个loger -->
        <appender-ref ref="consoleLog" />
        <appender-ref ref="fileInfoLog" />
        <appender-ref ref="fileErrorLog" />
    </root>
</configuration>